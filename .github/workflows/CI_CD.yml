name: sgm app

on:
  push:
    branches: [ main ]

jobs:
  # First we will see the application build or not, then we will deploy in EC2
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Build the docker_compose
      run: docker-compose up -d --build

  deploy:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2 

    - name: Create SSH directory
      run: mkdir -p ~/.ssh

    - name: Deploy in EC2
      env:
          PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY }}
          HOSTNAME: ${{ secrets.HOSTNAME }}
          USER_NAME: ${{ secrets.USER_NAME }}
          
      run: |
        echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
        ssh-keyscan -H $HOSTNAME >> ~/.ssh/known_hosts

        ssh -o StrictHostKeyChecking=no -i private_key "${USER_NAME}@${HOSTNAME}" '
          # Debugging: Print some messages to identify where the issue might be.
          echo "Script is starting"
          cd /home/ubuntu/sanyogam_all &&
          echo "Changed directory"
          
          # Use the correct default branch name (e.g., 'master' or 'main')
          git init && git checkout $(git symbolic-ref --short HEAD) &&
          echo "Checked out the default branch"
          
          git fetch --all &&
          echo "Fetched all branches"
          
          # Use the correct default branch name in the reset command
          git reset --hard origin/$(git symbolic-ref --short HEAD) &&
          echo "Reset to origin/$(git symbolic-ref --short HEAD)"
          
          git pull origin $(git symbolic-ref --short HEAD) &&
          echo "Pulled changes from origin/$(git symbolic-ref --short HEAD)"
          
          docker-compose -f docker-compose.yml up -d --build
          echo "Docker Compose command executed"
        '
