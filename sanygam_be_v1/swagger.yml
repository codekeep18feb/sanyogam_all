openapi: 3.0.0
info:
  title: "RP Flask REST API"
  description: "An API about users and profile"
  version: "1.0.0"
servers:
  - url: "/api"

components:
  securitySchemes:
    JWTAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      x-bearerInfoFunc: config.decode_token
  schemas:
    ProfileFilterObj:
      type: "object"
      properties:
        family_info:
          type: "object"

    SignUpData:
      type: "object"
      required:
        - fname
        - email
        - gender
      properties:
        fname:
          type: "string"
        lname:
          type: "string"
        email:
          type: "string"
        password:
          type: "string"
        gender:
          type: "string"
          enum: ["Male", "Female", "Other"]
    FatherSchema:
      type: "object"
      properties:
        first_name:
          type: "string"
        last_name:
          type: "string"
        designation:
          type: "string"
        company_name:
          type: "string"
        job_type:
          type: "string"


    FamilyInformationSchema:
      type: "object"
      properties:
        no_of_brothers:
          type: "integer"
        married_brother:
          type: "integer"
        no_of_sisters:
          type: "integer"
        married_sister:
          type: "integer"
        family_location:
          type: "string"
        native_place:
          type: "string"
        affluence:
          type: "string"
      
    

    ProfileUpdateData:
      type: "object"
      required:
        - gender
      properties:
        gender:
          type: "string"
          enum: ["Male", "Female", "Other"]
    

    MsgContent:
      type: "object"
      required:
        - msg
      properties:
        msg:
          type: "string"
    
    SaveOauthUserData:
      type: "object"
      
    
    RTCContent:
      type: "object"
      required:
        # - initiator
        - sdp
        - to_profile

      properties:
        # initiator:
        #   type: "boolean"
        sdp:
          type: "string"
        to_profile:
          type: "integer"

    Login:
      type: "object"
      required:
        - email
        - password
      properties:
        email:
          type: "string"
        password:
          type: "string"


  parameters:
    lname:
      name: lname
      in: query
      description: "Last name of the user"
      required: false
      schema:
        type: string
    id:
      name: id
      in: path
      description: "ID of the user"
      required: true
      schema:
        type: integer
    
    with_id:
      name: with_id
      in: path
      description: "ID of the user"
      required: true
      schema:
        type: integer
    
    q_email:
      name: q_email
      in: query
      description: "q_email"
      required: true
      schema:
        type: string

    to_userid:
      name: to_userid
      in: path
      description: "to_userid of the request"
      required: true
      schema:
        type: integer


    to_email:
      name: to_email
      in: path
      description: "to_email of the request"
      required: true
      schema:
        type: string

    to_email_nr:
      name: to_email
      in: query
      description: "to_email of the request"
      required: false  # 
      schema:
        type: string

    with_email:
      name: with_email
      in: path
      description: "chat with_email"
      required: true
      schema:
        type: string

    action:
      name: action
      in: query
      description: "handle_request action in query"
      required: false
      schema:
        type: string
    


    frm_email:
      name: frm_email
      in: path
      description: "frm_email of the request"
      required: true
      schema:
        type: string

    fname:
      name: fname
      in: query
      description: "First name of the user"
      required: false
      schema:
        type: string



paths:
  /login:
    post:
      operationId: "handlers.users.login"
      tags:
        - People
      summary: "Login a user"
      requestBody:
        description: "return a jwt"
        required: true
        content:
          application/json:
            schema:
              x-body-name: "user"
              # Login:
              type: "object"
              required:
                - email
                - password
              properties:
                email:
                  type: "string"
                password:
                  type: "string"
      responses:
        "201":
          description: "Successfully logged in user"
          content:
            application/json:
              schema:
                type: object
                properties:
                  token1:  # Update "token1" to "token"
                    type: string

  # logout
  /logout:
    get:
      operationId: "handlers.users.logout"
      security:
        - JWTAuth: [] 
      tags:
        - "User"
      summary: "logout"
      responses:
        "200":
          description: "Successfully logout"

  /users:
    get:
      operationId: "handlers.users.read_all"
      security:
        - JWTAuth: [] 
      tags:
        - "People"
      summary: "Read the list of users"
      responses:
        "200":
          description: "Successfully read users list"

  /signup:
    post:
      operationId: "handlers.users.signup"
      tags:
        - People
      summary: "Create a user"
      requestBody:
        description: "User to create"
        required: true
        content:
          application/json:
            schema:
              x-body-name: "signup_data"
              $ref: "#/components/schemas/SignUpData"
      responses:
        "201":
          description: "Successfully created user"


      

  /user/{id}:
    get:
      operationId: "handlers.users.read_id_one_query"
      tags:
        - People
      summary: "Read one user using query parameter"
      parameters:
        # - $ref: "#/components/parameters/image"
        - $ref: "#/components/parameters/id"
      
      responses:
        "200":
          description: "Successfully read user using query parameter"
  
  /users/query:
    get:
      operationId: "handlers.users.read_one_query"
      tags:
        - People
      summary: "Read one user using query parameter"
      parameters:
        - $ref: "#/components/parameters/lname"
        - $ref: "#/components/parameters/fname"
        - $ref: "#/components/parameters/q_email"
      responses:
        "200":
          description: "Successfully read user using query parameter"
  
  /me:
    get:
      operationId: "handlers.users.me"
      security:
        - JWTAuth: []
      tags:
        - User
      summary: "my detail"
      responses:
        "200":
          description: "Successfully read my detail"
  

  